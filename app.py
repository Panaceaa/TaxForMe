# coding=utf-8
import datetime
from telegram.ext import Updater, filters
from telegram.ext import CommandHandler, CallbackQueryHandler, MessageHandler, ConversationHandler
from telegram import ParseMode
import re
import time
import db_update
import data_graph


token = '2009637863:AAGafdSiceD-U2qGFw5RxWyh3TOofZ_W-mY'
updater = Updater(token, use_context=True)
START = '–ü—Ä–∏–≤–µ—Ç!üòä –í–≤–µ–¥–∏ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ –æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.'
product = 'taxforme'


def start(update, context):
    chat_id = update.message.chat.id
    updater.bot.send_message(chat_id=chat_id, text=START)
    db_update.user_data((update.message.chat.username, update.message.chat.first_name, int(update.message.chat.id), product))


def user_answer(update, context):
    chat_id = update.message.chat.id
    user = update.message.chat.first_name
    user_name = update.message.chat.username
    db_update.user_data((user_name, user, int(chat_id), product))
    symbol = update.message.text
    pattern = '[a-zA-z]'
    symbol = ''.join(x for x in re.findall(pattern, symbol)).upper()
    name = data_graph.fmp_name(symbol)
    if name is not None:
        context.user_data['ticker'] = symbol
        updater.bot.send_message(chat_id=chat_id, text=f'–ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: <b>{name}</b>\n\n–£–∫–∞–∂–∏ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–∞–∫ —ç—Ç–∞: 01.01.2021', parse_mode=ParseMode.HTML)

    else:
        db_update.user_error(chat_id, symbol, update.message.date, product='taxforme')
        updater.bot.send_message(chat_id=chat_id, text='–¢–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω üòø\n\n–í –Ω–∞—à–µ–π –±–∞–∑–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ü–∏–∏, —Ç–æ—Ä–≥—É—é—â–∏–µ—Å—è –Ω–∞ NYSE –∏–ª–∏ Nasdaq')


def user_date(update, context):
    chat_id = update.message.chat.id
    date_response = time.mktime(update.message.date.timetuple())

    try:
        start_date = datetime.datetime.strptime(update.message.text, '%d.%m.%Y')

        db_update.response_data((chat_id, context.user_data['ticker'], start_date, date_response, product))
        z, t, cur, pr, ret = data_graph.return_usd_rub([context.user_data['ticker']], [start_date])
        advice = '<b>–°–æ–≤–µ—Ç:</b> –ï—Å–ª–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—à—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, —Å–µ–π—á–∞—Å –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏, –≤ —Ä—É–±–ª—è—Ö - —Å—Ç–æ–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ —Ä—É–±–ª—è.'

        if float(z[5][:-1]) >= float(z[5][:-1]):
            advice = '<b>–°–æ–≤–µ—Ç:</b> –ï—Å–ª–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—à—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, —Ç–æ —Å—Ç–æ–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å —Å–Ω–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞ —Ä—É–±–ª—è, –≤ —Ä—É–±–ª—è—Ö - –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏.'

        if float(z[5][:-1]) <= 0 and float(z[5][:-1]) <= 0:
            advice = '–î–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –Ω–µ—Ç, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –Ω–∏–∫–∞–∫ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
        updater.bot.send_message(chat_id=chat_id, text=
                            f'\n{"üìà" if float(re.sub("[%]", "", z[4])) >= 0 else "üìâ"} <b>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {z[4]}</b>\n\n{"üìà" if float(re.sub("[%]", "", z[5])) >= 0 else "üìâ"} <b>C —É—á–µ—Ç–æ–º –∫—É—Ä—Å–∞: {z[5]}</b>\n\n{"üìà" if float(re.sub("[%]", "", z[6])) >= 0 else "üìâ"} <b>C —É—á–µ—Ç–æ–º –∫—É—Ä—Å–∞ –ø–æ—Å–ª–µ –Ω–∞–ª–æ–≥–æ–≤: {z[6]}</b>\n\n ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏: {z[2]}\n\n ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Ä—Å USDRUB: {z[3]}\n\nüìä –¢–∞–±–ª–∏—Ü–∞ –Ω–∏–∂–µ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é –≤ —Ä—É–±–ª—è—Ö –ø–æ—Å–ª–µ –Ω–∞–ª–æ–≥–æ–≤ –µ—Å–ª–∏ –∫—É—Ä—Å –≤—ã—Ä–∞—Å—Ç–µ—Ç/—É–ø–∞–¥–µ—Ç –Ω–∞ 3%, –∏–ª–∏ –∞–∫—Ü–∏—è –≤—ã—Ä–∞—Å—Ç–µ—Ç/—É–ø–∞–¥–µ—Ç –Ω–∞ 10%.\n\n<b>–ö–∞–∫ –ø–æ–Ω—è—Ç—å —Ç–∞–±–ª–∏—Ü—É:</b> –ï—Å–ª–∏ –∫—É—Ä—Å —É–≤–µ–ª–∏—á–∏—Ç—Å—è –¥–æ {cur}, –∞ —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∞ –æ—Ç–º–µ—Ç–∫–µ {pr}, —Ç–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –Ω–∞–ª–æ–≥–æ–≤ —Å–æ—Å—Ç–∞–≤–∏—Ç: {ret}\n\n{advice}\n<em>(–ù–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π.)</em>',
                            parse_mode=ParseMode.HTML)
        updater.bot.send_message(chat_id=chat_id, text=t, parse_mode=ParseMode.HTML)

    except Exception:
        updater.bot.send_message(chat_id=chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã üòæ\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


def quit_func(update, context):
    return ConversationHandler.END


TICKER = 0

updater.dispatcher.add_handler(CommandHandler('start', start))
updater.dispatcher.add_handler(MessageHandler(filters.Filters.regex('[a-zA-z]'), callback=user_answer))
updater.dispatcher.add_handler(MessageHandler(filters.Filters.regex('\.') & (~ filters.Filters.command), callback=user_date))

updater.start_polling()


